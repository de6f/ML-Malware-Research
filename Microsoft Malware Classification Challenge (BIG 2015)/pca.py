# -*- coding: utf-8 -*-

"""
    Eliminate randomness using constant seed values
"""

import random
random.seed(1)
from numpy.random import seed
seed(3)
from tensorflow import set_random_seed
set_random_seed(3)
import os
os.environ['PYTHONHASHSEED'] = str(7)

import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from sklearn.decomposition import PCA

from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True


from metrics import TestReport

#### Ayarlar

model_file = 'first_try.h5'

cvDir = '.\\image_class\\fixed\\5_fold_75_sample'

train_image_count = 2400
test_image_count = 600

#### Ayarlar

"""
    ML model
"""

def create_SVM():
    from sklearn import svm
    return svm.SVC(gamma='scale')


kfold_data = os.listdir(cvDir)
testReport = TestReport(savefig=True)

for data in kfold_data:
    
    """
        Load images and train model
    """
    
    trainDir = '{}\\{}\\train'.format(cvDir, data)
    train_data = ImageDataGenerator(rescale=1./255)
    train_gen = train_data.flow_from_directory(
            trainDir,
            target_size=(256, 256),
            color_mode='grayscale',
            batch_size=train_image_count,
            class_mode='categorical',
            shuffle=True)
    
    testDir = '{}\\{}\\test'.format(cvDir, data)
    test_data = ImageDataGenerator(rescale=1./255)
    test_gen = test_data.flow_from_directory(
            testDir,
            target_size=(256, 256),
            color_mode='grayscale',
            batch_size=test_image_count,
            class_mode='categorical',
            shuffle=False)

    valid_data = ImageDataGenerator(rescale=1./255)
    valid_gen = valid_data.flow_from_directory(
            testDir,
            target_size=(256, 256),
            color_mode='grayscale',
            batch_size=test_image_count,
            class_mode='categorical',
            shuffle=True)
    
    X_train, y_train = train_gen.next()
    X_test, y_test = test_gen.next()
    
    nsamples, nx, ny, r = X_train.shape
    X_train = X_train.reshape((nsamples, nx * ny))
    
    nsamples, nx, ny, r = X_test.shape
    X_test = X_test.reshape((nsamples, nx * ny))
    
    pca = PCA(n_components=20)
    pca.fit(X_train)
    
    X_train = pca.transform(X_train)
    X_test = pca.transform(X_test)
    
    model = create_SVM()
    y_train = np.argmax(y_train, axis=1)
    model.fit(X_train, y_train)

    testReport(model, (X_test, y_test), print_report=True)    

    print(testReport.make_report())
        
    
