import os
import numpy as np
import array
import zlib

from math import ceil, sqrt
from PIL import Image

#### Configuration

bytes_dir = 'D:\\train'
images_dir = '.\\imageData'
undecodedByte = 'FF'

try:
    os.makedirs(images_dir)
except FileExistsError:
    pass

#### Configuration

concat_path = lambda *args: '\\'.join(args)

def findByteFiles():
    dataFiles = os.listdir(bytes_dir)
    dataFiles = list(filter(lambda x: x.endswith('.bytes'), dataFiles))
    return dataFiles

def bytes2png(f, width):
    file = concat_path(bytes_dir, f)
    
    """
        Construct image name and return if file already exists
    """
    image_name = concat_path(images_dir, f.split('.')[0] + '_' + str(width) + '.png')
    if os.path.isfile(image_name):
        print('Image already exists: {}'.format(image_name))
        return
    
    b_data = array.array('i')
    for line in open(file, 'r'):
        for byte in line.rstrip()[8:].split():
            if (byte == '??'): byte = undecodedByte
            b_data.append(int(byte, base=16))
    

    height = ceil(len(b_data) / width)
    if len(b_data) < (width * height):
        b_data += array.array('i', (0,) * (width*height - len(b_data)))
    image_buffer = np.fromiter(b_data, dtype=np.uint8).reshape((height,width))
    
    img = Image.fromarray(image_buffer, 'L')
    img.save(image_name)

def deflate_compressed_size(bytes_in):
    bytes_out = zlib.compress(bytes_in)
    return len(bytes_out)

def deflate_compression_ratio(bytes_in):
    len_out = deflate_compressed_size(bytes_in)
    return (100-len_out/len(bytes_in)*100), len_out

files = findByteFiles()

for file in files:
    
    '''
    #Fixed width: 512
    images_dir = '.\\imageData_fixed'
    bytes2png(file,512)
    '''
    
    '''
    # Nataraj et al. file size to width table 
    images_dir = '.\\imageData_nataraj'
    bytes_file = concat_path(bytes_dir, file)
    with open(bytes_file, 'r') as f:
        lines = f.read().splitlines()
        first_addr = lines[0].split()[0]
        last_addr = lines[-1].split()[0]
        
        file_size = int(last_addr, 16) - int(first_addr, 16)
        print('{}: {}kB'.format(file, file_size / 1024))
        if (file_size < 10 * 1024):
            bytes2png(file, 32)
        elif (file_size < 30 * 1024):
            bytes2png(file, 64)
        elif (file_size < 60 * 1024):
            bytes2png(file, 128)
        elif (file_size < 100 * 1024):
            bytes2png(file, 256)
        elif (file_size < 200 * 1024):
            bytes2png(file, 384)
        elif (file_size < 500 * 1024):
            bytes2png(file, 512)
        elif (file_size < 1000 * 1024):
            bytes2png(file, 768)
        else:
            bytes2png(file, 1024)
    '''
        
    '''
    # Our method (bytes)
    images_dir = '.\\imageData_kerim_bytes'
    bytes_file = concat_path(bytes_dir, file)
    with open(bytes_file, 'r') as f:
        file_in = [''.join(line.split()[1:]) for line in f.readlines()]
        bytes_in = ''.join(file_in).encode('utf-8')
        c_ratio, compressed_size = deflate_compression_ratio(bytes_in)
        print('{}: %{:0.2f}'.format(file, c_ratio))        
        bytes2png(file, ceil(sqrt(compressed_size)))
    '''
    
